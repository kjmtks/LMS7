@using System.Linq;
@using System.Collections.Generic;
@using ALMS.App.Models.Entities;
@inject DatabaseService DB;

<div class="@CssClass">
    <div class="ui menu top attached" top>
        @if (!string.IsNullOrWhiteSpace(Subject))
        {
            <div class="header item"><i class="database icon"></i> @Subject</div>
        }

        @if (!string.IsNullOrWhiteSpace(CurrentCommitInfo?.Message))
        {
            <div class="borderless item"><small>#@CurrentCommitInfo.ShortHash</small>&nbsp;<small>@ToShortText(CurrentCommitInfo.Message,64)</small></div>

        }

        @if (RepositoryPair is IApiedRepository repos)
        {
            <div class="right menu">
                @if (!string.IsNullOrWhiteSpace(CurrentCommitInfo?.Message))
                {
                    <div class="ui right aligned item">
                        <div class="ui small labels">
                            @foreach (var b in RepositoryPair.GetBranches())
                            {
                                if (b == Branch)
                                {
                                    <a class="ui teal label">@b</a>
                                }
                                else
                                {
                                    <a class="ui label" @onclick='async () => { Branch = b; CurrentPath = ""; await UpdateAsync(); }'>@b</a>
                                }
                            }
                        </div>
                    </div>
                }
                <div class="ui right aligned item" style="width: 20em">
                    <div class="ui transparent left icon input">
                        <i class="git square icon"></i>
                        <input class="prompt tt" style="width: 100%" type="text" value="git clone @repos.ApiUrl">
                    </div>
                </div>
            </div>
        }
    </div>


    @if (CurrentCommitInfo != null)
    {
        var hierarchy = Hierarchy(CurrentPath);

        <div class="ui menu attached">
            <a class="borderless item" href="javascript: void(0)" @onclick='() => { CurrentPath = ""; }'>/</a>
            @foreach (var (entry, i) in hierarchy.Select((x, i) => (x, i)))
            {
                <a class="borderless item" href="javascript: void(0)" @onclick="() => { CurrentPath = entry; }">@(entry.Split("/").Last())</a>
                if (i < hierarchy.Count() - 1)
                {
                    <span class="borderless item">/</span>
                }
            }
        </div>

        var children = GetChildren(CurrentPath);
        @if (children.Count() > 0)
        {
            <table class="ui celled padded table bottom attached">
                <thead>
                    <tr>
                        <th class="single line">Name</th>
                        <th class="single line">Message</th>
                        <th class="right aligned">Commiter</th>
                        <th class="right aligned">Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var name in children)
                    {
                        var fullname = string.IsNullOrWhiteSpace(CurrentPath) ? name : $"{CurrentPath}/{name}";
                        var commitInfo = RepositoryPair.ReadCommitInfo(fullname, Branch);
                        var user = DB.Context.Users.Where(x => x.EmailAddress == commitInfo.AuthorEmail).FirstOrDefault();
                        var isDir = GetChildren(fullname).Count() > 0;
                        <tr>
                            <td>
                                <i class="@(isDir ? "folder" : "file") outline icon"></i>
                                <a href="javascript: void(0)" @onclick='() => { CurrentPath = fullname; }'>@name</a>
                            </td>
                            <td><small>@ToShortText(commitInfo.Message, 64)</small></td>
                            @if (user != null)
                            {
                                <td class="right aligned"><small><a href="/admin/users/@user.Account">@user.DisplayName</a></small></td>
                            }
                            else
                            {
                                <td class="right aligned"><small>@commitInfo.AuthorName</small></td>
                            }
                            <td class="right aligned"><small>@commitInfo.Date</small></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            var (data, type) = RepositoryPair.ReadFile(CurrentPath, Branch);
            if (type == IRepositoryPair.FileType.Text)
            {
                using (var r = new System.IO.StreamReader(data))
                {
                    <pre class="ui segment bottom attached tt">@r.ReadToEnd()</pre>
                }
            }
            else
            {
                <div class="ui placeholder  segment bottom attached">
                    <div class="ui icon header">
                        <i class="file image icon"></i>
                        Binary file
                    </div>
                    <div class="inline">
                        <a class="ui button" href="@GetRawFileUrl(Branch, CurrentPath)" target="_blank">Show Raw File</a>
                    </div>
                </div>
            }
        }
    }
    else if (RepositoryPair is IApiedRepository repos2 && repos2.CanPush(User))
    {
        <div class="ui segment bottom attached">
            <pre class="tt">git init .
git remote add origin @repos2.ApiUrl
touch .keep
git add .
git commit -m "Initial Commit"
git push origin master</pre>
        </div>
    }
    else
    {
        <div class="ui segment bottom attached">
            No content
        </div>
    }
</div>




@code {

    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public string Subject { get; set; }
    [Parameter]
    public IRepositoryPair RepositoryPair { get; set; }
    [Parameter]
    public string Branch { get; set; } = "master";
    [Parameter]
    public User User { get; set; }
    [Parameter]
    public string CurrentPath { get; set; } = "";

    [Parameter]
    public Func<string, string, string> GetRawFileUrl { get; set; }

    protected CommitInfo CurrentCommitInfo { get; set; }
    protected IEnumerable<string> Files { get; set; }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateAsync();
    }

    public async Task SetPath(string path)
    {
        try
        {
            CurrentPath = path;
            await UpdateAsync();
        }
        catch
        { 
            CurrentPath = "";
            await UpdateAsync();
        }
    }

    public async Task UpdateAsync()
    {
        Files = RepositoryPair.ReadFileList("", Branch);
        CurrentCommitInfo = RepositoryPair.ReadCommitInfo(CurrentPath, Branch);

        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected IEnumerable<string> GetChildren(string path)
    {
        return Files.Where(x => x.Length >= path.Length && x.Substring(0, path.Length) == path)
            .Where(x => string.IsNullOrWhiteSpace(path) ? true : (!(x.Length >= path.Length + 1) || x[path.Length] == '/'))
            .Select(x => x.Substring(path.Length).Split("/")?.Where(x => !string.IsNullOrWhiteSpace(x))?.FirstOrDefault())
            .Where(x => !string.IsNullOrWhiteSpace(x)).Distinct();
    }

    protected IEnumerable<string> Hierarchy(string path)
    {
        var entries = path.Split("/").Where(x => !string.IsNullOrWhiteSpace(x));
        return entries.Aggregate(new string[] { }, (acc, x) =>
        {
            var names = new string[acc.Length + 1];
            var last = acc.LastOrDefault();
            acc.CopyTo(names, 0);
            names[acc.Length] = string.IsNullOrWhiteSpace(last) ? x : $"{last}/{x}";
            return names;
        });
    }

    protected string ToShortText(string text, int max)
    {
        return (text.Length > max) ? $"{text.Substring(0,max)}..." : text;
    }
}
