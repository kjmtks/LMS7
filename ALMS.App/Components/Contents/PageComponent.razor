@inject NavigationManager NM;

@if (string.IsNullOrWhiteSpace(ErrorMessage))
{
    if (!initialized)
    {
        <br />
        <br />
        <br />
        <br />
        <div class="ui basic segment">
            <div class="ui active inverted dimmer">
                <div class="ui medium text loader">Initializing...</div>
            </div>
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
        </div>
    }
    else if (Building)
    {
        <br />
        <br />
        <br />
        <br />
        <div class="ui basic segment">
            <div class="ui active inverted dimmer">
                <div class="ui medium text loader">@progress</div>
            </div>
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
        </div>
    }
    else
    {
        @renderer
    }
}
else
{
    <ALMS.App.Components.Utils.ErrorMessageComponent Subject="@ErrorSubject" ErrorMessage="@ErrorMessage" />
}


@code {

    [Inject]
    protected IJSRuntime JS { get; set; }

    [Parameter]
    public ALMS.App.Models.Entities.Lecture Lecture { get; set; }
    [Parameter]
    public ALMS.App.Models.Entities.User User { get; set; }
    [Parameter]
    public string Path { get; set; }
    [Parameter]
    public string Branch { get; set; }

    protected ALMS.App.Models.Contents.Page Page;
    protected RenderFragment renderer;
    protected string ErrorMessage;
    protected string ErrorSubject;

    protected bool initialized = false;
    protected bool Building;
    protected string progress;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        initialized = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            initialized = true;
            Building = true;
            progress = "Building a page";
            StateHasChanged();
            try
            {
                Page = new ALMS.App.Models.Contents.Page(Lecture, Path, Branch);
                progress = "Rendering a page";
                renderer = await Page.RenderAsync(NM, User);
            }
            catch (Exception e)
            {
                ErrorSubject = e.Message;
                ErrorMessage = e.StackTrace;
            }
            Building = false;
            StateHasChanged();
            await JS.InvokeVoidAsync("typesetMathJax");
        }
    }

}
