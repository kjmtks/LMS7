@inherits FileActivityComponentBase
@inject IFileUploadService UPLOAD;
@using BlazorInputFile;

    <div class="ui form" style="margin-left: 1em; margin-right: 1em; padding-top: 1em">

        @if (SavedFileInfo != null)
        {
            <div class="ui label">
                <i class="file icon"></i>
                Saved file: @SavedFileInfo.Length bytes
            </div>
        }
        @if (SubmittedFileInfo != null)
        {
            <div class="ui blue label">
                <i class="file icon"></i>
                Submitted file: @SubmittedFileInfo.Length bytes
            </div>
        }
        <br />
        <br />
        <div class="field">
            @if (Loading)
            {
                <div class="ui basic segment">
                    <div class="ui active inverted dimmer">
                        <div class="ui text loader">Loading... @Progress</div>
                    </div>
                    <br />
                    <br />
                    <br />
                    <br />
                </div>
            }
            else
            {
                <InputFile OnChange="OnFileSelectedAsync" MaxBufferSize="@(1024*1024*1024)" />
            }
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <div class="ui negative message" style="padding: 1em">
                    <p>@ErrorMessage</p>
                </div>
            }
        </div>

        @if (!string.IsNullOrWhiteSpace(FileName))
        {
            <div class="ui teal label">
                <i class="caret right icon"></i>
                Prepared: @FileName
                <div class="detail">@FileSize bytes, @FileType</div>
            </div>
        }
    </div>


@code
{
    public byte[] Data { get; set; } = null;
    protected string ErrorMessage { get; set; }

    protected bool Loading { get; set; } = false;
    protected string FileName;
    protected long FileSize;
    protected string FileType;
    protected string Progress;

    protected System.IO.FileInfo SavedFileInfo;
    protected System.IO.FileInfo SubmittedFileInfo;

    protected async Task OnFileSelectedAsync(IFileListEntry[] entries)
    {
        Loading = true;
        FileName = null;
        ErrorMessage = "";
        Progress = "";
        Data = null;
        var entry = entries.FirstOrDefault();
        if (entry != null)
        {
            var file = File as ALMS.App.Models.Contents.ActivityFilesUpload;
            if (entry.Size > file.Maxsize)
            {
                ErrorMessage = $"The file size should be less or equals to {file.Maxsize} bytes.";
                Loading = false;
                return;
            }
            if (!string.IsNullOrWhiteSpace(file.AllowedContentTypes))
            {
                var types = file.AllowedContentTypes.Split(";").Select(x => x.Trim());
                if (!types.Contains(entry.Type))
                {
                    if (types.Count() == 1)
                    {
                        ErrorMessage = $"The content type should be {types.First()}.";
                    }
                    else
                    {
                        var heads = types.Take(types.Count() - 1);
                        ErrorMessage = $"The content type should be one of {string.Join(", ", heads)}, or {types.Last()}. {entry.Type} is not allowed.";
                    }
                    Loading = false;
                    return;
                }
            }
            Data = await UPLOAD.UploadAsync(entry, async (total, seek, block) =>
            {
                Progress = $"{100 * (seek + block) / total}%  ({seek + block}/{total})";
                await InvokeAsync(() => { StateHasChanged(); });
            });
            FileName = entry.Name;
            FileSize = entry.Size;
            FileType = entry.Type;
            ErrorMessage = "";
            Loading = false;
        };
    }


    public void SetSavedFileInfo(System.IO.FileInfo file)
    {
        SavedFileInfo = file;
    }
    public void SetSubmittedFileInfo(System.IO.FileInfo file)
    {
        SubmittedFileInfo = file;
    }

    public override Task<string> GetValueAsync()
    {
        return Task.Run<string>(() => "");
    }
    public override Task SetValueAsync(string value)
    {
        return Task.Run(() => { });
    }
    public override Task SetDefaultValueAsync()
    {
        return Task.Run(() => { });
    }
    public override Task SetAnswerValueAsync()
    {
        return Task.Run(() => { });
    }
}
