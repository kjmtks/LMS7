@inherits EditableEntityComponentBase<ALMS.App.Models.Entities.User>

    <ALMS.App.Components.Utils.ErrorMessageComponent Subject="@ErrorSubject" ErrorMessage="@ErrorMessage" />
    <div class="@CssClass">
        <div class="ui basic segment">
            <div class="ui @(Processing ? "active" : "disabled") inverted dimmer">
                <div class="ui text loader">Please wait...</div>
            </div>

            <div class="ui menu top attached">
                <div class="header left item"><i class="user icon"></i> @(string.IsNullOrEmpty(Subject) ? "Users" : Subject)</div>
                @if (Permision.HasFlag(EntityManagementPermision.CanCreateNew))
                {
                    <a class="right menu">
                        @if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("LDAP_HOST")))
                        {
                            <a class="item" @onclick="OpenLdapUsersCreate">
                                <i class="icons">
                                    <i class="users icon"></i>
                                    <i class="corner add icon"></i>
                                </i>
                            </a>
                        }
                        <a class="item" @onclick="() => OpenCreate()"><i class="plus icon"></i></a>
                    </a>
                }
            </div>

            <ALMS.App.Components.Utils.Paginated Collection="@Collection" @ref="@Pagination" CssClass="bottom attached">
                <table class="ui padded table @(Pagination.HasPagination ? "" : "bottom") attached">
                    <thead>
                        <tr>
                            <th class="single line">Account</th>
                            <th class="single line">Name</th>
                            <th class="single line">Email Address</th>
                            <th class="single line">Roles</th>
                            <th class="right aligned"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var model in Pagination.ShowedModels)
                        {
                            <tr>
                                <td><a href="users/@model.Account">@model.Account</a></td>
                                <td>@model.DisplayName</td>
                                <td>@model.EmailAddress</td>
                                <td>
                                    @if (@model.IsAdmin)
                                    {
                                        <text>Admin</text>
                                    }
                                    &nbsp;
                                    @if (@model.IsSenior)
                                    {
                                        <text>Senior</text>
                                    }
                                </td>
                                <td class="right aligned">
                                    @if (Permision.HasFlag(EntityManagementPermision.CanEdit))
                                    {
                                        <a class="ui blue icon button" @onclick="() => OpenEdit(model)"><i class="edit icon"></i></a>
                                    }
                                    @if (Permision.HasFlag(EntityManagementPermision.CanRemove))
                                    {
                                        <a class="ui red icon button" @onclick="() => RemoveAsync(model)"><i class="trash icon"></i></a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </ALMS.App.Components.Utils.Paginated>


            <div class="ui modal" id="edit-form-@ComponentId">
                <div class="header">@(Mode == EditMode.CreateNew ? "Add New" : "Edit") User</div>
                <div class="content">

                    <EditForm EditContext="@EditContext" OnSubmit="@Submit">
                        <DataAnnotationsValidator />
                        <div class="ui form">
                            <div class="field">
                                <label>Account</label>
                                <InputText @bind-Value="@EdittingModel.Account" />
                                <ValidationMessage For="@(() => EdittingModel.Account)" />
                            </div>
                            <div class="field">
                                <label>Password</label>
                                <InputText type="password" @bind-Value="@EdittingModel.Password" />
                                <ValidationMessage For="@(() => EdittingModel.Password)" />
                            </div>
                            <div class="field">
                                <label>DisplayName</label>
                                <InputText @bind-Value="@EdittingModel.DisplayName" />
                                <ValidationMessage For="@(() => EdittingModel.DisplayName)" />
                            </div>
                            <div class="field">
                                <label>Email Address</label>
                                <InputText @bind-Value="@EdittingModel.EmailAddress" />
                                <ValidationMessage For="@(() => EdittingModel.EmailAddress)" />
                            </div>
                            <div class="field">
                                <label>Is Admin</label>
                                <InputCheckbox @bind-Value="@EdittingModel.IsAdmin" />
                                <ValidationMessage For="@(() => EdittingModel.IsAdmin)" />
                            </div>
                            <div class="field">
                                <label>Is Senior</label>
                                <InputCheckbox @bind-Value="@EdittingModel.IsSenior" />
                                <ValidationMessage For="@(() => EdittingModel.IsSenior)" />
                            </div>
                        </div>

                        <div class="content">
                            <div class="actions">
                                <div class="ui red cancel inverted button"><i class="remove icon"></i>Cancel</div>
                                <button type="submit" class="ui green inverted button"><i class="checkmark icon"></i>OK</button>
                            </div>
                        </div>
                    </EditForm>

                </div>
            </div>



            <div class="ui modal" id="ldap-form-@ComponentId">
                <div class="header">Create Ldap Users</div>
                <div class="content">

                    <div class="ui form">
                        <div class="field">
                            <label>Accounts</label>
                            <textarea @bind="@LdapAccounts" />
                        </div>
                    </div>

                    <div class="content">
                        <div class="actions">
                            <div class="ui red cancel inverted button"><i class="remove icon"></i>Cancel</div>
                            <a href="javascript:void(0);" @onclick="CreateLdapUsers" class="ui green inverted button"><i class="checkmark icon"></i>OK</a>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>


@code
{
    protected string LdapAccounts { get; set; }


    protected async Task OpenLdapUsersCreate()
    {
        await OpenLdapUserDialog();
    }

    protected async Task CreateLdapUsers()
    {
        Processing = true;
        await CloseLdapUserDialog();
        var accounts = LdapAccounts.Split(new string[] { " ", "\t", "\n", "\r", "," }, StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim())
            .Where(x => System.Text.RegularExpressions.Regex.IsMatch(x, @"^[_A-Za-z][_A-Za-z0-9-]+$"));
        var _accounts = DB.Context.Users.Select(x => x.Account);
        foreach(var account in accounts.Except(_accounts))
        {
            var user = new ALMS.App.Models.Entities.User() { 
                Account = account,
                DisplayName = account,
                EmailAddress = "",
                IsLdapInitialized = false,
                IsLdapUser = true
            };
            try
            {
                user.CreateNew(DB.Context, Config);
            }
            catch (Exception e)
            {
                ErrorSubject = e.Message;
                ErrorMessage = e.StackTrace;
            }
        }
        LdapAccounts = "";
        DB.Context.SaveChanges();
        Processing = false;
    }

    public async Task CloseLdapUserDialog() => await JS.InvokeVoidAsync("modalControl", $".ui.modal#ldap-form-{ComponentId}", "hide");
    public async Task OpenLdapUserDialog() => await JS.InvokeVoidAsync("modalControl", $".ui.modal#ldap-form-{ComponentId}", "show");
}