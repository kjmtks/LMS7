@inherits LayoutComponentBase
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NM;
@inject DatabaseService DB;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div class="ui fixed inverted menu">
    <div class="ui container">
        <AuthorizeView>
            <Authorized>
                <a class="header item" href="">
                    <i class="home icon"></i>
                    Home
                </a>
                @if (!string.IsNullOrWhiteSpace(OwnerAccount) && !string.IsNullOrWhiteSpace(LectureName))
                {
                    <a class="header item" href="javascript: void(0);"
                       @onclick="() => { GoToLectureHome(); }">
                        <i class="pencil icon"></i>
                        Lecture Home
                    </a>
                    @if (IsTeacher(context.User.Identity.Name))
                    {
                        <a class="header item" href="javascript: void(0);"
                           @onclick="() => { GoToLectureDashboard(); }">
                            <i class="pen square icon"></i>
                            Dashboard
                        </a>
                    }
                }
                <div class="right menu">
                    <AuthorizeView Roles="Admin" Context="AdminContext">
                        <a class="item" href="admin">
                            <i class="key icon"></i>
                            Administration
                        </a>
                    </AuthorizeView>
                    <div class="right menu">
                        <a class="item" href="profile">
                            <i class="user icon"></i>
                            @context.User.Identity.Name
                        </a>
                        <a class="item" href="logout">
                            <i class="sign-out icon"></i>
                            Logout
                        </a>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <a class="header item" href="">
                    <i class="home icon"></i>
                    Home
                </a>
                <div class="right menu">
                    <a class="item" href="login">
                        <i class="sign-in icon"></i>
                        Login
                    </a>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

<!-- <div class="ui main text container"> -->
<div class="ui main">
    @Body
</div>

@code {
    private string LectureName { get; set; } = null;
    private string OwnerAccount { get; set; } = null;
    private Models.Entities.Lecture Lecture { get; set; } = null;


    protected bool IsTeacher(string userName)
    {
        if (Lecture == null) return false;
        var user = DB.Context.Users.Where(x => x.Account == userName)
            .Include(x => x.Lectures)
            .Include(x => x.Sandboxes)
            .Include(x => x.LectureUsers).ThenInclude(x => x.Lecture)
            .FirstOrDefault();
        return user != null ? user.IsTeacher(Lecture) : false;
    }
    protected override void OnParametersSet()
    {
        object ownerAccount = null;
        object lectureName = null;
        (this.Body.Target as RouteView)?.RouteData.RouteValues?.TryGetValue("OwnerAccount", out ownerAccount);
        OwnerAccount = ownerAccount?.ToString();

        (this.Body.Target as RouteView)?.RouteData.RouteValues?.TryGetValue("LectureName", out lectureName);
        LectureName = lectureName?.ToString();

        if (!string.IsNullOrWhiteSpace(OwnerAccount) && !string.IsNullOrWhiteSpace(LectureName))
        {
            Lecture = DB.Context.Lectures
                .Include(x => x.Owner)
                .Include(x => x.Sandboxes)
                .Include(x => x.LectureUsers).ThenInclude(x => x.User)
                .Where(x => x.Name == LectureName && x.Owner.Account == OwnerAccount)
                .FirstOrDefault();
        }
    }

    protected void GoToLectureHome()
    {
        NM.NavigateTo($"/lecture/{OwnerAccount}/{LectureName}/page/master", true);
    }
    protected void GoToLectureDashboard()
    {
        NM.NavigateTo($"/users/{OwnerAccount}/lectures/{LectureName}", true);
    }
}

