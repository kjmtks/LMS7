@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{dir11}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{dir11}/{dir12}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{dir11}/{dir12}/{dir13}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{dir11}/{dir12}/{dir13}/{dir14}/{ActivityName}";
@page "/users/{UserAccount}/lectures/{LectureName}/activities/{Branch}/{dir1}/{dir2}/{dir3}/{dir4}/{dir5}/{dir6}/{dir7}/{dir8}/{dir9}/{dir10}/{dir11}/{dir12}/{dir13}/{dir14}/{dir15}/{ActivityName}";


@inject DatabaseService DB;
@using Microsoft.EntityFrameworkCore;
@using ALMS.App.Components.Admin;
@using ALMS.App.Components;
@using ALMS.App.Components.Utils;
@using ALMS.App.Models.Entities;
@inject NotifierService Notifier;
@implements IDisposable;
@inject AuthenticationStateProvider AuthenticationStateProvider;


<AuthorizeView>
    <Authorized Context="AuthorizedContext">
        @if (Lecture != null)
        {
            var LoginUser = DB.Context.Users.Where(x => x.Account == AuthorizedContext.User.Identity.Name)
                .Include(x => x.Lectures)
                .Include(x => x.Sandboxes)
                .Include(x => x.LectureUsers).ThenInclude(x => x.Lecture).FirstOrDefault();
            @if (LoginUser.IsTeacher(Lecture))
            {
                var p = LoginUser.IsSenior || LoginUser.IsAdmin ? EntityManagementPermision.CanCreateNew | EntityManagementPermision.CanEdit | EntityManagementPermision.CanRemove : EntityManagementPermision.DenyAll;

                var submits = DB.Context.ActivityActionHistories.Where(x => x.LectureId == Lecture.Id && x.ActivityName == ActivityName && x.ActionType == ActivityActionType.SaveAndSubmit);

                <div class="ui">

                    @if (!string.IsNullOrWhiteSpace(Message))
                    {
                        <div class="ui top attached mini icon menu">
                            <span class="borderless item">Message</span>
                            <a class="right item" @onclick='() => { Message = ""; }'><i class="times icon"></i></a>
                        </div>
                        <pre class="ui green segment bottom attached tt" style="overflow-y: auto; word-wrap: break-word; white-space: pre-wrap;">@Message</pre>
                    }
                    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                    {
                        <div class="ui top attached mini icon menu">
                            <span class="borderless item">Error</span>
                            <a class="right item" @onclick='() => { ErrorMessage = ""; }'><i class="times icon"></i></a>
                        </div>
                        <pre class="ui red segment bottom attached tt" style="overflow-y: auto; word-wrap: break-word; white-space: pre-wrap;">@ErrorMessage</pre>
                    }

                    <div class="ui content">

                        <div class="ui menu top attached">
                            <div class="header left item"><i class="pen square icon"></i> @ActivityName</div>

                            <a class="right item" @onclick="async () => await SaveCommentsAndScoresAsync()"><i class="save icon"></i> Save all comments and scores</a>
                        </div>
                        <table class="ui padded table bottom attached">
                            <thead>
                                <tr>
                                    <th class="two wide">User</th>
                                    <th class="two wide">Submitted at &amp; Files</th>
                                    <th class="five wide">Summary</th>
                                    <th class="two wide">Score</th>
                                    <th class="four wide">Comment</th>
                                    <th class="one wide"></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="3">*</td>
                                    <td><div class="ui fluid input massive"><input type="text" class="tt" @bind="score_templ" /></div></td>
                                    <td><div class="ui form"><div class="field"><textarea class="tt" rows="4" @bind="comment_templ" placeholder="comment"></textarea></div></div></td>
                                    <td><button class="ui primary small button" @onclick="() => { CopyCommentAndScoreToBlanks(); }">copy to blanks</button></td>
                                </tr>
                                @foreach (var a in Lecture.LectureUsers.OrderBy(x => x.User.Account))
                                {
                                    var action = submits.Where(x => x.UserId == a.UserId).OrderBy(x => x.DateTime).LastOrDefault();
                                    <tr>
                                        <td>
                                            <p>
                                                @if (a.Role == LectureUserRole.Teacher)
                                                {
                                                    <i class="chess king icon"></i>
                                                }
                                                @if (a.Role == LectureUserRole.Student)
                                                {
                                                    <i class="chess pawn icon"></i>
                                                }
                                                @a.User.Account
                                            </p>
                                            <p>@a.User.DisplayName</p>
                                        </td>
                                        @if (action == null)
                                        {
                                            <td colspan="5">  </td>
                                        }
                                        else
                                        {
                                            var dir = new System.IO.DirectoryInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/");
                                            <td>
                                                <p><i class="clock outline icon"></i>@action.DateTime.ToString()</p>
                                                @if (dir.Exists)
                                                {
                                                    @foreach (var file in dir.GetFiles().Where(x => !(new string[] { "SUBMIT", "SCORE", "COMMENT" }.Contains(x.Name))))
                                                    {
                                                        <p>
                                                            <i class="file outline icon"></i>
                                                            <a target="_blank" href="/lecture/@Lecture.Owner.Account/@Lecture.Name/submissions/@Branch/@a.User.Account/@action.ActivityName/@file.Name">@file.Name</a>
                                                        </p>
                                                    }
                                                }
                                            </td>

                                            <td>
                                                @{
                                                    var t = GetSummary(action);
                                                }
                                                @if (!string.IsNullOrWhiteSpace(t))
                                                {
                                                    <pre class="tt" style="overflow-y: auto; word-wrap: break-word; white-space: pre-wrap; background-color: white;">@t</pre>
                                                }

                                            </td>
                                            <td><div class="ui fluid input massive"><input type="text" class="tt" @bind="scores[a.User.Account]" /></div></td>
                                            <td><div class="ui form"><div class="field"><textarea class="tt" rows="4" @bind="comments[a.User.Account]" placeholder="comment"></textarea></div></div></td>
                                            <td><a class="ui primary button" @onclick="async () => await SaveCommentAsync(a.User.Account)">save</a></td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

            }
        }
        else
        {
            <ErrorMessageComponent Subject="Error" ErrorMessage="Not found" />
        }
    </Authorized>
</AuthorizeView>

@code{

    [Parameter]
    public string UserAccount { get; set; }
    [Parameter]
    public string LectureName { get; set; }
    [Parameter]
    public string ActivityName { get; set; }
    [Parameter]
    public string Branch { get; set; }


    [Parameter] public string Dir1 { get; set; }
    [Parameter] public string Dir2 { get; set; }
    [Parameter] public string Dir3 { get; set; }
    [Parameter] public string Dir4 { get; set; }
    [Parameter] public string Dir5 { get; set; }
    [Parameter] public string Dir6 { get; set; }
    [Parameter] public string Dir7 { get; set; }
    [Parameter] public string Dir8 { get; set; }
    [Parameter] public string Dir9 { get; set; }
    [Parameter] public string Dir10 { get; set; }
    [Parameter] public string Dir11 { get; set; }
    [Parameter] public string Dir12 { get; set; }
    [Parameter] public string Dir13 { get; set; }
    [Parameter] public string Dir14 { get; set; }
    [Parameter] public string Dir15 { get; set; }


    public IRepositoryPair RepositoryPair { get; set; }

    protected User User { get; set; }
    protected Lecture Lecture { get; set; }

    protected IEnumerable<string> Files { get; set; }

    protected Dictionary<string,string> comments;
    protected Dictionary<string, string> scores;
    private string comment_templ;
    private string score_templ;
    private string Message = "";
    private string ErrorMessage = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var names = new string[] { Dir1, Dir2, Dir3, Dir4, Dir5, Dir6, Dir7, Dir8, Dir9, Dir10, Dir11, Dir12, Dir13, Dir14, Dir15, ActivityName }.Where(x => !string.IsNullOrEmpty(x));
        ActivityName = string.Join("/", names);
        Notifier.Notify += OnNotify;
        User = DB.Context.Users.Where(x => x.Account == UserAccount)
            .Include(x => x.Lectures)
            .Include(x => x.Sandboxes)
            .Include(x => x.LectureUsers).ThenInclude(x => x.Lecture).FirstOrDefault();
        Lecture = DB.Context.Lectures
            .Include(x => x.Owner)
            .Include(x => x.Sandboxes)
            .Include(x => x.LectureUsers).ThenInclude(x => x.User)
            .Where(x => x.Name == LectureName && x.Owner.Account == UserAccount).FirstOrDefault();
        RepositoryPair = Lecture.LectureSubmissionsRepositoryPair;
        Files = RepositoryPair.ReadFileList("", Branch);

        comments = new Dictionary<string, string>();
        scores = new Dictionary<string, string>();
        foreach (var account in Lecture.LectureUsers.Select(x => x.User.Account))
        {
            comments.Add(account, $"");
            scores.Add(account, $"");
        }
        ReadCommentsAndScores();
    }

    private void CopyCommentAndScoreToBlanks()
    {
        var submits = DB.Context.ActivityActionHistories.Where(x => x.LectureId == Lecture.Id && x.ActivityName == ActivityName && x.ActionType == ActivityActionType.SaveAndSubmit);
        foreach (var a in Lecture.LectureUsers.OrderBy(x => x.User.Account))
        {
            var action = submits.Where(x => x.UserId == a.UserId).OrderBy(x => x.DateTime).LastOrDefault();
            if (action != null)
            {
                if(string.IsNullOrWhiteSpace(comments[a.User.Account]))
                {
                    comments[a.User.Account] = comment_templ;
                }
                if (string.IsNullOrWhiteSpace(scores[a.User.Account]))
                {
                    scores[a.User.Account] = score_templ;
                }
            }
        }
    }

    public void ReadCommentsAndScores()
    {
        var submits = DB.Context.ActivityActionHistories.Where(x => x.LectureId == Lecture.Id && x.ActivityName == ActivityName && x.ActionType == ActivityActionType.SaveAndSubmit);
        foreach (var a in Lecture.LectureUsers.OrderBy(x => x.User.Account))
        {
            var action = submits.Where(x => x.UserId == a.UserId).OrderBy(x => x.DateTime).LastOrDefault();
            if (action != null)
            {

                var comment_file = new System.IO.FileInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/COMMENT");
                var score_file = new System.IO.FileInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/SCORE");
                if (comment_file.Exists)
                {
                    using (var fs = comment_file.OpenText())
                    {
                        comments[a.User.Account] = fs.ReadToEnd().Trim();
                    }
                }
                if (score_file.Exists)
                {
                    using (var fs = score_file.OpenText())
                    {
                        scores[a.User.Account] = fs.ReadToEnd().Trim();
                    }
                }
            }
        }
    }

    public async Task SaveCommentsAndScoresAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var LoginUser = DB.Context.Users.Where(x => x.Account == authState.User.Identity.Name)
                .Include(x => x.Lectures)
                .Include(x => x.Sandboxes)
                .Include(x => x.LectureUsers).ThenInclude(x => x.Lecture).FirstOrDefault();
            Console.WriteLine(authState.User.Identity.Name);
            var time = DateTime.Now;
            var submits = DB.Context.ActivityActionHistories.Where(x => x.LectureId == Lecture.Id && x.ActivityName == ActivityName && x.ActionType == ActivityActionType.SaveAndSubmit);
            foreach (var a in Lecture.LectureUsers.OrderBy(x => x.User.Account))
            {
                var action = submits.Where(x => x.UserId == a.UserId).OrderBy(x => x.DateTime).LastOrDefault();
                if (action != null)
                {

                    var comment_file = new System.IO.FileInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/COMMENT");
                    var score_file = new System.IO.FileInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/SCORE");

                    using (var w = new System.IO.StreamWriter(comment_file.FullName))
                    {
                        w.Write(comments[a.User.Account]);
                    }
                    using (var w = new System.IO.StreamWriter(score_file.FullName))
                    {
                        w.Write(scores[a.User.Account]);
                    }
                    Lecture.LectureSubmissionsRepositoryPair.ClonedRepository.CommitChanges($"[Activity] Name=\"{ActivityName}\" Action=\"Comment\" DateTime=\"{time.ToString("yyyy-MM-ddTHH:mm:sszzz")}\"", LoginUser.DisplayName, LoginUser.EmailAddress);
                    Lecture.LectureSubmissionsRepositoryPair.ClonedRepository.Push();
                }
            }
            Message = "Comments and scores were saved successfully";
            ErrorMessage = "";
        }
        catch (Exception e)
        {
            Message = "";
            ErrorMessage = e.Message;
        }

    }

    public async Task SaveCommentAsync(string account)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var LoginUser = DB.Context.Users.Where(x => x.Account == authState.User.Identity.Name)
                .Include(x => x.Lectures)
                .Include(x => x.Sandboxes)
                .Include(x => x.LectureUsers).ThenInclude(x => x.Lecture).FirstOrDefault();
            var time = DateTime.Now;
            var user = Lecture.LectureUsers.OrderBy(x => x.User.Account).Where(a => a.User.Account == account).Select(x => x.User).FirstOrDefault();
            if (user != null)
            {
                var comment_file = new System.IO.FileInfo($"{Lecture.DirectoryPath}/submissions/{user.Account}/TEACHING_NOTE");
                if (!comment_file.Directory.Exists)
                {
                    comment_file.Directory.Create();
                }
                using (var w = new System.IO.StreamWriter(comment_file.FullName))
                {
                    w.Write(comments[account]);
                }
                Lecture.LectureSubmissionsRepositoryPair.ClonedRepository.CommitChanges($"[TeachinNote] DateTime=\"{time.ToString("yyyy-MM-ddTHH:mm:sszzz")}\"", LoginUser.DisplayName, LoginUser.EmailAddress);
                Lecture.LectureSubmissionsRepositoryPair.ClonedRepository.Push();
            }
            Message = $"Comment for {user.DisplayName} was saved successfully";
            ErrorMessage = "";
        }
        catch (Exception e)
        {
            Message = "";
            ErrorMessage = e.Message;
        }
    }

    public async Task OnNotify()
    {
        await InvokeAsync(StateHasChanged);
        Files = RepositoryPair.ReadFileList("", Branch);
    }
    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }


    protected string GetSummary(ActivityActionHistory action)
    {
        if (action == null) return null;
        var target = new System.IO.FileInfo($"{action.Lecture.DirectoryPath}/submissions/{action.User.Account}/{action.ActivityName}/SUBMIT");
        if (target.Exists)
        {
            using (var fs = target.OpenText())
            {
                return fs.ReadToEnd().Trim();
            }
        }
        else
        {
            return null;
        }
    }

}

